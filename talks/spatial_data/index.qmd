---
format: 
  revealjs:
    code-block-bg: true
    code-block-background: true
    code-copy: true
    chalkboard: true
    highlight-style: github
    slide-number: c/t
    logo: logo_cenaprece.jpeg
    footer: "[github.com/fdzul](https://github.com/fdzul)"
    center-title-slide: true
---

<h2>Datos Espaciales
<br>
</h2>

<h2>

</h2>

<hr>

<br>


<h3>Dr. Felipe Dzul Manzanilla</h3>

<h3>Dr. Fabián Correa-Morales</h3>

<h3>

</h3>
<br>
<h4>Date: 2024-01-01 </h4>

<h4> Update: 2024-01-01</h4>

<br>

<h4>


![](https://www.rayshader.com/reference/figures/smallhobart.gif){.absolute top="170" left="650" width="450"}

## [Temario]{style="color:#003300;"}
<hr style="height:2px;border-width:0;color:#330019;background-color:#330019">

:::: {.columns}

::: {.column width="50%"}
- Datos Espaciales
- Tipos de Mapas
- Mapas estáticos en R
   - Base R
   - ggplot2
   - tmap
   - mapsf
:::

::: {.column width="50%"}
-  Mapas Interactivos en R
   - leaflet
   - mapview
   - tmap
   - plotly
   
- Mapas Animados

- Mapas en 3D
  - [rayshader](https://www.rayshader.com)
:::


::::


## Clasificación de los Datos Espaciales
<hr style="height:2px;border-width:0;color:#330019;background-color:#330019">

```{r spatial_data_classification, echo=FALSE, out.width='100%', fig.align='center'}

DiagrammeR::grViz("digraph {
                  # graph definitions
  graph [layout = dot, rankdir = TB]
  
  # node definitions
  node [shape = rectangle, 
  style = filled, 
  color = grey, 
  nodesep = .5,
  fixedsize = true, 
  width = 2] 
  
  # edge definition
  edge [color = grey, arrowhead = normal, arrowtail = dot]
  
  ##### Spatial Data
  
  areal [label = 'Areal Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  lattice_data [label = 'Lattice Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  pp_data [label = 'Point Pattern Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  geo_data [label = 'Geostatistical Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  spatial_data [label = 'Spatial Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  
  
  
  #####
 
  
 # 
 continuo [label = 'Continuo',  fillcolor =  '#F4B400', color = 'white', fontcolor = 'black']
 discrete [label = 'Discreto',  fillcolor =  '#F4B400', color = 'white', fontcolor = 'black']
 
 #
 fixed  [label = 'Fijo',  fillcolor =  '#4285F4', color = 'white', fontcolor = 'white']
 random  [label = 'Aleatorio',  fillcolor =  '#4285F4', color = 'white', fontcolor = 'white']
 
 regular  [label = 'Regular',  fillcolor =  '#4285F4', color = 'white', fontcolor = 'white']
 irregular  [label = 'Irregular',  fillcolor =  '#4285F4', color = 'white', fontcolor = 'white']
 
 # examples
 cases [label = 'Casos',  fillcolor =  '#DB4437', color = 'white', fontcolor = 'white']
 ovitraps [label = 'Ovitrampas',  fillcolor =  '#DB4437', color = 'white', fontcolor = 'white']
 ageb [label = 'Casos/colonia/ageb',  fillcolor =  '#DB4437', color = 'white', fontcolor = 'white']
 grid [label = 'Casos/areas geométricas',  fillcolor =  '#DB4437', color = 'white', fontcolor = 'white']
 
 ##### define the relation
 
 #
 spatial_data -> {continuo discrete} 
 continuo -> {fixed random}
 discrete -> {regular, irregular}
 fixed -> geo_data
 random -> pp_data
 irregular -> areal
 regular -> lattice_data
 pp_data -> cases
 geo_data -> ovitraps
 areal -> ageb
 lattice_data -> grid

 
 
  
}")

```


::: aside
[Krainski et al 2019](https://www.taylorfrancis.com/books/mono/10.1201/9780429031892/advanced-spatial-modeling-stochastic-partial-differential-equations-using-inla-elias-krainski-virgilio-g%C3%B3mez-rubio-haakon-bakka-amanda-lenzi-daniela-castro-camilo-daniel-simpson-finn-lindgren-h%C3%A5vard-rue)
:::

## Tipos de mapas
<hr style="height:2px;border-width:0;color:#330019;background-color:#330019">
```{r map_type, echo=FALSE, out.width='100%', fig.align='center'}

DiagrammeR::grViz("digraph {
                  # graph definitions
  graph [layout = dot, rankdir = TB]
  
  # node definitions
  node [shape = rectangle, 
  style = filled, 
  color = grey, 
  nodesep = .5,
  fixedsize = true, 
  width = 2] 
  
  # edge definition
  edge [color = grey, arrowhead = normal, arrowtail = dot]
  
  ##### Spatial Data
  
  areal [label = 'Areal Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  pp_data [label = 'Point Pattern Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  geo_data [label = 'Geostatistical Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  spatial_data [label = 'Spatial Data',  fillcolor =  ' #0F9D58', color = 'white', fontcolor = 'white']
  
  ##### map type
  maps [label = 'Maps',  fillcolor =  'DodgerBlue', color = 'white', fontcolor = 'white']
  
  static [label = 'Static',  fillcolor =  'DodgerBlue', color = 'white', fontcolor = 'white']
 
  interactive [label = 'Interactive',  fillcolor =  'DodgerBlue', color = 'white', fontcolor = 'white']
  animated [label = 'Animated',  fillcolor =  'DodgerBlue', color = 'white', fontcolor = 'white']
  
  d3 [label = '3D Maps',  fillcolor =  'DodgerBlue', color = 'white', fontcolor = 'white']
  
  
  
  satellital [label = 'Satellital',  fillcolor =  '#8BC3FC', color = 'white', fontcolor = 'white']
  no_satellital [label = 'Non Satellital',  fillcolor =  '#8BC3FC', color = 'white', fontcolor = 'white']
  
  ##### packages
  
  # static maps
 base_r [label = 'Base R',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 lattice [label = 'lattice',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 ggplot [label = 'ggplot2',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 ggspatial [label = 'ggspatial',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 ggmap [label = 'ggmap',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 tmap [label = 'tmap',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 cartography [label = 'cartography',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 mapsf [label = 'mapsf',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
  
 # intercative maps
 leaflet [label = 'leaflet',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 mapview [label = 'mapview',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 
 # animated maps
 
 # 3d
 rayshader [label = 'rayshader',  fillcolor =  'orange', color = 'white', fontcolor = 'black']
 
 
 ##### define the relation
 
 # Static maps
 spatial_data -> {areal pp_data geo_data} -> maps -> {static interactive animated d3}
 static -> {satellital, no_satellital} -> base_r
 base_r -> {lattice ggplot tmap cartography, mapsf}
 ggplot -> {ggmap ggspatial}

 # Interactive maps
 interactive -> {leaflet tmap mapview}
 
 # animated maps
 
 animated -> {ggplot tmap}
 
 # 3d
 d3 -> {rayshader}
}")

```






## Datos Espaciales
<hr style="height:2px;border-width:0;color:#330019;background-color:#330019">

::: {.panel-tabset}

### Point Pattern Data

```{r point_pattern_data,echo = FALSE, warning=FALSE, message=FALSE }
# Step 1. load the dataset ####
load("~/Library/CloudStorage/OneDrive-Personal/proyects/geocoding_mex/2023/9.geocoded_dataset/dengue_mx_2023.RData")

# Step 2. extract the locality boundary ####
gua <- rgeomex::extract_locality(locality =  c("Guadalajara", "Tlaquepaque", 
                                           "Zapopan", "Tonalá"),
                             cve_edo = "14") 

# Step 3. extract the dengue cases by locality ####

# Step 3.1 transform the dengue cases geocoded in sf object ####
z <- z |>
    dplyr::filter(ESTATUS_CASO %in% c(2)) |>
    sf::st_as_sf(coords = c("long", "lat"),
                 crs = 4326)

# Step 3.2 extract the dengue cases in the locality of guadalajara ####

z_cases <- z[gua, ] 

# Step 4. check the dengue cases by locality

# Step 4.1 create the palette ###
mapview::mapview(z_cases,
                 layer.name = "Semana",
                 zcol = "SEM")
```

### Geostadistical Data

```{r geostatistical_data, echo = FALSE, warning=FALSE, message=FALSE}
# Step 2. load the dataset ####
load("/Users/fdzul/Library/CloudStorage/OneDrive-Personal/cursos_impartidos/2022/maps_R/8.RData/guadalajara_12.RData")

# Step 1. extract the data ####
x <- guadalajara_12$data |>
    sf::st_as_sf(coords = c("Pocision_X", "Pocision_Y"),
                 crs = 4326)

# Step 2. extract the locality ###
loc <- guadalajara_12$loc


# Step 3. load of block ####
blocks <- rgeomex::blocks_ine20_mx_b[loc,]

# Step 4. extract the blocks ####
blocks_ovitraps <- blocks[x,]

# Step 5. define the palette ####
pal_num <- leaflet::colorNumeric(palette = fishualize::fish(n = length(unique(x$eggs)),
                                                            option = "Scarus_hoefleri",
                                                            direction = -1),
                                 domain = x$eggs)

l <- leaflet::leaflet() |>
    leaflet::addTiles() |>
    leaflet::addPolygons(data = blocks_ovitraps,
                         group = "blocks",
                         weight = 2,
                         opacity = .8) |>
    leaflet::addCircleMarkers(data = x |> dplyr::filter(eggs == 0),
                              group = "ovitraps_negative",
                              radius = 5,
                              fillColor = "red",
                              fillOpacity = 1,
                              stroke = 3,
                              weight = 2,
                              color = "white",
                              opacity = .8) |>
    leaflet::addCircleMarkers(data = x |> dplyr::filter(eggs > 0),
                              group = "ovitraps",
                              radius = 5,
                              fillColor = ~pal_num(eggs),
                              fillOpacity = 1,
                              stroke = 3,
                              weight = 2,
                              color = "white",
                              opacity = .8) |>
    leaflet::addLegend(pal = pal_num,
                       values = x$eggs,
                       opacity = 1,
                       title = "Números de Huevos",
                       position = "topright") 
esri <- grep("^Esri|OpenTopoMap|OpenStreetMap|HERE|CartoDB|NASAGIBS", leaflet::providers, value = TRUE)


for (provider in esri) {
    l <- l |> leaflet::addProviderTiles(provider,
                                        group = provider)
}

l |>
    leaflet::addLayersControl(baseGroups = names(esri),
                              options = leaflet::layersControlOptions(collapsed = TRUE),
                              overlayGroups = c("blocks", "ovitraps_negative", "ovitraps")) |>
    leaflet::addMiniMap(tiles = esri[[1]],
                        toggleDisplay = TRUE,
                        position = "bottomleft") |>
    htmlwidgets::onRender(" function(el, x) {
            var myMap = this;
      myMap.on('baselayerchange',
        function (e) {
          myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
        })
    }")


```



### Areal Data


:::




## [Dios Botic]{style="color:#003300;"}
<hr style="height:2px;border-width:0;color:#330019;background-color:#330019">

-   ***Bio*** : [https://fdzul.github.io/web_site_fadm/]()

-   ***email*** : [felipe.dzul.m@gmail.com]()

-   ***celular*** : [9999580167]()

-   ***slides***: [https://calm-hummingbird-41cb33.netlify.app/talks/spatial_data/#/]()

